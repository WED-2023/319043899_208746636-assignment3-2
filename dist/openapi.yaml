openapi: 3.0.0
info:
  title: Ido and Aviv the Chefs
  description: This is an API for the best recipes website in the world
  contact:
    email: avivnach@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://127.0.0.1:3000
- #url: https://virtserver.swaggerhub.com/avivnach/food-recipes/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: Authentication
  description: |
    Handles user authentication processes such as register and login.
- name: Recipes
  description: |
    Covers all recipe-related actions, including searching, previewing,and random recipes.
- name: Users
  description: |
    Manages user-specific data like personal recipes, viewed recipes, and favorites.
paths:
  /Login:
    post:
      tags:
      - Authentication
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: login succeeded
        "401":
          description: Username or Password incorrect
  /Register:
    post:
      tags:
      - Authentication
      summary: Signup as a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "201":
          description: user created
        "400":
          description: Missing or invalid fields
        "409":
          description: Username or email already exists
        "500":
          description: Internal Server Error
  /Logout:
    post:
      tags:
      - Authentication
      summary: Logs out the current user
      responses:
        "200":
          description: Logout succeeded
        "500":
          description: Internal Server Error
  /users/favorites:
    get:
      tags:
      - Users
      summary: Get the logged-in user's favorite recipes
      responses:
        "200":
          description: List of favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
        "401":
          description: User not authenticated
        "404":
          description: No favorite recipes found
    post:
      tags:
      - Users
      summary: Add a recipe to the user's favorites
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favorites_body'
        required: true
      responses:
        "201":
          description: Recipe added to favorites
        "400":
          description: Missing or invalid fields
        "401":
          description: Unauthorized access
  
  /users/favorites/{recipeId}:
    delete:
      tags:
      - Users
      summary: Remove a recipe from the user's favorites
      parameters:
        - name: recipeId
          in: path
          description: The ID of the recipe to remove
          required: true
          schema:
            type: integer
            example: 12345
      responses:
        "201":
          description: Recipe removed from favorites
        "400":
          description: Missing or invalid query parameters
        "401":
          description: Unauthorized access
        "404":
          description: Recipe not found in favorites
  /users/myrecipes:
    get:
      tags:
      - Users
      summary: Get the user's private recipes
      responses:
        "200":
          description: List of private recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
        "401":
          description: Unauthorized access
        "404":
          description: No private recipes found
        "500":
          description: Internal Server Error
  /users/recipes:          
    post:
      tags:
        - Users
      summary: Create a new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - picture
                - timeToMake
                - dietCategory
                - isGlutenFree
                - description
                - ingredients
                - cuisine
                - dishes
              properties:
                name:
                  type: string
                  description: The name of the recipe
                  example: "Spaghetti Carbonara"
                picture:
                  type: string
                  description: URL to the recipe picture
                  example: "https://example.com/images/spaghetti.jpg"
                timeToMake:
                  type: string
                  description: Time required to make the recipe
                  example: "30"
                dietCategory:
                  type: string
                  description: |
                    The dietary classification of the recipe.
                  enum:
                    - vegan
                    - vegetarian
                    - none
                  example: vegetarian
                isGlutenFree:
                  type: boolean
                  description: Indicates if the recipe is gluten free
                  example: true
                description:
                  type: string
                  description: Recipe description
                  example: "A classic Italian pasta dish..."
                ingredients:
                  type: array
                  description: List of ingredients
                  items:
                    type: string
                  example: ["300g spaghetti", "2 eggs", "1/2kg bacon", "100g parmesan cheese"]
                cuisine:
                  type: string
                  description: Cuisine type
                  example: "Italian"
                dishes:
                  type: integer
                  description: Dish amount
                  example: 4
      responses:
        "201":
          description: Recipe created successfully
        "400":
          description: Missing required fields or invalid ingredients format
        "409":
          description: Recipe already exists
        "500":
          description: Internal server error
  /users/lastViews:
    get:
      tags:
        - Users
      summary: Get the last three recipes viewed by the user
      responses:
        "200":
          description: List of the last three viewed recipes with metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
        "404":
          description: No views found for the user

        "500":
          description: Internal server error
    post:
      summary: Record a recipe view for the logged-in user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipeId
              properties:
                recipeId:
                  type: integer
                  description: The ID of the recipe being viewed
      responses:
        '201':
          description: View recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: View recorded successfully
        '400':
          description: Missing recipeId in body
        '500':
          description: Internal server error



  /recipes/random:
    get:
      summary: Get a list of 3 random recipes
      tags:
        - Recipes
      responses:
        '200':
          description: A list of random recipes with metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
        '500':
          description: Internal Server Error    
  /recipes/search:
    get:
      summary: Search for recipes based on query parameters
      tags:
        - Recipes
      parameters:
        - name: search
          in: query
          description: Search keyword or phrase
          required: true
          schema:
            type: string
        - name: number
          in: query
          description: Number of results to return (default 5)
          required: false
          schema:
            type: integer
            default: 5
        - name: cuisine
          in: query
          description: Filter by cuisine type
          required: false
          schema:
            type: string
        - name: diet
          in: query
          description: Filter by diet type
          required: false
          schema:
            type: string
        - name: intolerance
          in: query
          description: Filter by intolerance type
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of recipes matching search criteria with metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        '404':
          description: No recipes found
        '500':
          description: Internal Server Error

  /recipes/{recipeId}:
    get:
      summary: Get detailed information about a specific recipe
      tags:
        - Recipes
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'

        '404':
          description: Recipe not found
        '500':
          description: Internal Server Error
  
  
components:
  schemas:
    recipe:
      required:
      - name
      - ingredients
      - picture
      - timeToMake
      - popularity
      - dietCategory
      - isGlutenFree
      - description
      - cuisine
      - dishes
      type: object
      properties:
        recipe_id:
          type: integer
          description: Unique identifier of the recipe
          example: 1
        name:
          type: string
          description: The name or title of the recipe
          example: Spaghetti Bolognese
        picture:
          type: string
          description: A URL pointing to an image of the recipe
          format: uri
          example: https://example.com/images/spaghetti-bolognese.jpg
        ingredients:
          type: array
          description: A list of ingredients with quantities
          items:
            type: string
          example:
            - 200g spaghetti
            - 300g minced beef
            - 2 cloves garlic, minced
        timeToMake:
          oneOf:
            - type: integer
              example: 45
            - type: string
              example: "45 minutes"
          description: Total preparation time (in minutes or as string with units)
        popularity:
          type: integer
          description: Number of likes or rating count
          example: 128
        dietCategory:
          type: string
          description: |
            The dietary classification of the recipe.
          enum:
            - vegan
            - vegetarian
            - none
          example: vegetarian
        isGlutenFree:
          oneOf:
            - type: boolean
              example: true
            - type: integer
              enum: [0, 1]
              example: 1
          description: Indicates whether the recipe is gluten-free
        dishes:
          oneOf:
            - type: integer
              example: 4
            - type: string
              example: "unknown"
          description: The number of dishes or servings
        description:
          type: string
          description: Cooking instructions or description of the recipe
          example: "1. Boil spaghetti according to package instructions..."
        cuisine:
          type: string
          description: The cuisine type of the recipe
          example: Italian
        created_by:
          type: integer
          description: User ID of the creator, if available
          example: 1
        isWatched:
          type: boolean
          description: Whether the recipe is marked as watched
          example: false
        isFavorite:
          type: boolean
          description: Whether the recipe is marked as favorite
          example: true
          
    user:
      required:
      - username
      - password
      - firstname
      - lastname
      - email
      - country
      - phone
      - profilePic
      type: object
      properties:
        username:
          type: string
          description: The username for the user
          example: johndoe
        password:
          type: string
          description: The password for the user
          example: password123
        firstname:
          type: string
          description: The first name of the user
          example: John
        lastname:
          type: string
          description: The last name of the user
          example: Doe
        email:
          type: string
          description: The email address of the user
          format: email
          example: johndoe@example.com
        country:
          type: string
          description: The country of residence of the user
          example: United States
        phone:
          type: string
          description: The phone number of the user
          example: 123-456-7890
        profilePic:
          type: string
          description: profile picture of user
          format: uri
          example: https://example.com/profile-pic.jpg
    login_body:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
          example: David
        password:
          type: string
          example: "1234"
    favorites_body:
      required:
      - recipeId
      type: object
      properties:
        recipeId:
          type: integer
          description: The ID of the recipe to add to favorites
   